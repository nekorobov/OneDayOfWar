package app.onedayofwar.Battle.Units.Space;import android.opengl.Matrix;import app.onedayofwar.Battle.BattleElements.Field;import app.onedayofwar.Battle.Units.Unit;import app.onedayofwar.Graphics.Assets;import app.onedayofwar.Graphics.Sprite;import app.onedayofwar.System.Vector2;/** * Created by Nikita on 12.11.2014. *//*Корабль АкираФорма  X       X      X XКоличество на поле 2шт. */public class Akira extends Unit{    public Akira(Vector2 position, int zoneID, boolean isVisible)    {        super(isVisible);        if(isVisible)        {            image = new Sprite(Assets.akiraImage);            image.Scale((float)Assets.isoGridCoeff);            icon = new Sprite(Assets.sonderIcon);            icon.setPosition(position.x, position.y);            icon.Scale((float)Assets.iconCoeff);            stroke = new Sprite(Assets.sonderStroke);            stroke.Scale((float)Assets.isoGridCoeff);        }        this.zoneID = (byte)zoneID;        Initialize();    }    //region Initialization    private void Initialize()    {        if(isVisible)        {            ResetPosition();        }        form = new Vector2[4];        InitializeFormArray();        accuracy = 100;        power = 7500;        hitPoints = 1000;        armor = 500;        reloadTime = 4;    }    //endregion    @Override    public boolean SetForm(Vector2 startSocket, Field field, boolean isInstallUnit)    {        Vector2 tmp = new Vector2();        Vector2[] tmpForm = new Vector2[form.length];        Vector2 sizes = field.GetSocketsSizes();        for(int i = 0 ; i < form.length; i++)            tmpForm[i] = new Vector2();            if(field.IsIso())            {                if(!isRight)                {                    tmp.SetValue(startSocket.x, startSocket.y);                    if(field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                    return false;                    tmpForm[0].SetValue(tmp);                    tmp.SetValue(startSocket.x, startSocket.y - sizes.y);                    if( Math.abs(0.5 * (tmp.x - field.getMatrix()[12]))  + field.getMatrix()[13] - field.height/2 - 3 >= tmp.y || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[1].SetValue(tmp);                    tmp.SetValue(startSocket.x - sizes.x, startSocket.y);                    if(-Math.abs(0.5 * (tmp.x - field.getMatrix()[12])) + field.height/2 + field.getMatrix()[13] - 3 <= tmp.y || Math.abs(0.5 * (tmp.x -  field.getMatrix()[12]))  + field.getMatrix()[13] - field.height/2 - 3 >= tmp.y || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[2].SetValue(tmp);                    tmp.SetValue(startSocket.x + sizes.x/2, startSocket.y + sizes.y/2);                    if(-Math.abs(0.5 * (tmp.x - field.getMatrix()[12])) + field.height/2 + field.getMatrix()[13] - 3 <= tmp.y || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[3].SetValue(tmp);                }                else                {                    tmp.SetValue(startSocket.x, startSocket.y);                    if(field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[0].SetValue(tmp);                    tmp.SetValue(startSocket.x, startSocket.y - sizes.y);                    if(Math.abs(0.5 * (tmp.x - field.getMatrix()[12]))  + field.getMatrix()[13] - field.height/2 - 3 >= tmp.y || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[1].SetValue(tmp);                    tmp.SetValue(startSocket.x + sizes.x, startSocket.y);                    if(-Math.abs(0.5 * (tmp.x -  field.getMatrix()[12])) + field.height/2 + field.getMatrix()[13] - 3 <= tmp.y  || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[2].SetValue(tmp);                    tmp.SetValue(startSocket.x - sizes.x/2, startSocket.y + sizes.y/2);                    if(-Math.abs(0.5 *(tmp.x - field.getMatrix()[12])) + field.height/2 + field.getMatrix()[13] - 3 <= tmp.y || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[3].SetValue(tmp);                }            }            else            {                if(!isRight)                {                    tmp.SetValue(startSocket.x, startSocket.y);                    if(field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[0].SetValue(tmp);                    tmp.SetValue(startSocket.x, startSocket.y - sizes.y);                    if(tmp.y <= field.getMatrix()[13] || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[1].SetValue(tmp);                    tmp.SetValue(startSocket.x - sizes.x, startSocket.y + sizes.y);                    if(tmp.y >= field.getMatrix()[13] + field.height || tmp.x <= field.getMatrix()[12] || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[2].SetValue(tmp);                    tmp.SetValue(startSocket.x + sizes.x, startSocket.y + sizes.y);                    if(tmp.x >= field.getMatrix()[12] + field.width || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[3].SetValue(tmp);                }                else                {                    tmp.SetValue(startSocket.x, startSocket.y);                    if(field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[0].SetValue(tmp);                    tmp.SetValue(startSocket.x + sizes.x, startSocket.y);                    if(tmp.x >= field.getMatrix()[12] + field.width || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[1].SetValue(tmp);                    tmp.SetValue(startSocket.x - sizes.x, startSocket.y - startSocket.y);                    if(tmp.x <= field.getMatrix()[12] || tmp.y <= field.getMatrix()[13] || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[2].SetValue(tmp);                    tmp.SetValue(startSocket.x - sizes.x, startSocket.y + sizes.y);                    if(tmp.y >= field.getMatrix()[13] + field.height || field.GetFieldInfo()[(int)field.GetLocalSocketCoord(tmp).x][(int)field.GetLocalSocketCoord(tmp).y] != -1)                        return false;                    tmpForm[3].SetValue(tmp);                }            }        if(isInstallUnit)        {            for (int i = 0; i < form.length; i++)                form[i].SetValue(tmpForm[i]);            //if(isVisible && isRight) stroke.horizontalFlip();        }        return true;    }    @Override    public byte GetZone()    {        return zoneID;    }    @Override    protected void ResetOffset()    {        offset.SetValue((int)(30 * Assets.isoGridCoeff), (int)(-24 * Assets.isoGridCoeff));        strokeOffset.SetValue((int)(-4 * Assets.isoGridCoeff),(int)(-4 * Assets.isoGridCoeff));    }    @Override    protected void ChangeOffset()    {        if(isRight)            offset.SetValue((int)(-27 * Assets.isoGridCoeff),(int)(-22 * Assets.isoGridCoeff));        else            ResetOffset();    }    @Override    public void Update()    {    }}